{{define "header"}}
package {{Variable .Variables "apiPackage"}};
{{end}}

{{define "struct"}}
// {{.Name}} {{if .Description}}{{.Description}}{{else}}{{.Type.Expression}}{{end}}
type {{.Type.Expression}} struct {
	{{range $val :=.Properties -}}
	{{CapitalizeLetter $val.Name}}  {{$val.Type.Expression}}  `json:"{{$val.Name}},omitempty"` //{{$val.Description}}
	{{end}}
}
{{end}}


{{define "path"}}

// {{CapitalizeLetter .Tag}}{{CapitalizeLetter .Name}} {{.Path}}
type {{CapitalizeLetter .Tag}}{{CapitalizeLetter .Name}} struct {
    Client ApiClient[*{{.Response.Expression}}]
}

// Call {{.Description}}
func (receiver *{{CapitalizeLetter .Tag}}{{CapitalizeLetter .Name}}) Call({{template "parameters" .}}) (*{{.Response.Expression}}, error) {
    {{if .Parameters -}}
    params := map[string]any{}
    {{range $idx,$val := .Parameters -}}
    params["{{$val.Name}}"] = {{$val.Alias}}
    {{end}}
    {{- end -}}
    return receiver.Client.{{CapitalizeLetter .Method}}({{.Path}}, {{if or .Parameters .Request}}params{{else}}nil{{end}})
}
{{end}}

{{define "parameters"}}
	{{- if .Parameters -}}
		{{range $idx,$val := .Parameters -}} {{if gt $idx 0}}, {{end}}{{$val.Alias}} {{$val.Type.Expression}}{{end}}
	{{- else -}}
		{{if .Request}} params {{.Request.Expression}} {{end}}
	{{- end -}}
{{end}}

{{define "api"}}
    	{{range $val :=.Paths -}}
    	{{template "path" $val}}
    	{{end}}
{{end}}


{{define "client"}}
package {{Variable .Variables "clientPackage"}}

// ApiClient TODO You need to implement the current interface, which can refer to std http
type ApiClient[T any] interface {
	Get(name string, params map[string]any) (T, error)

	Post(name string, params any) (T, error)

	Put(name string, params any) (T, error)

	Delete(name string, params any) (T, error)
}
{{end}}