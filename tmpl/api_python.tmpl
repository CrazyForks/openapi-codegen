{{define "header"}}
from dataclasses import dataclass
from typing import Generic, TypeVar, Optional, Any, Type, List, Dict

from client import ApiClient

T = TypeVar('T')
A = TypeVar('A')
B = TypeVar('B')
C = TypeVar('C')
P = TypeVar('P')

{{end}}

{{define "struct"}}
@dataclass
class {{.Type.Expression}}:
    """
    {{.Name}} {{.Description}}
    """
	{{range $val :=.Properties -}}
	{{$val.Name}}: {{$val.Type.Expression}} = None
	{{end}}
{{end}}



{{define "api"}}
class {{.Name}}:
    """
    {{.Description}}
    """
    client: ApiClient = None

    def __init__(self, client: ApiClient):
        self.client = client

    {{range $val :=.Paths -}}
    {{template "path" $val}}
    {{end}}

{{end}}


{{define "path"}}

    def {{.Name}}(self, {{template "parameters" .}}) -> Optional[{{.Response.Expression}}]:
        """
        {{.Description}}
        """
        {{if .Queries}}
        params = { {{range $idx,$val := .Parameters -}}"{{$val.Name}}": {{$val.Alias}},{{end}} }
        {{- else -}}
        {{- if .Request}}{{else}}params = {}{{end -}}
        {{- end}}
        return self.client.{{.Method}}({{.Path}}, {{.Response.Expression}}, {{- if .Request}}body{{else}}params{{end}})
{{end}}


{{define "parameters"}}
{{- range $idx,$val := .Parameters -}} {{if gt $idx 0}}, {{end}}{{$val.Alias}}:{{$val.Type.Expression}}{{end -}}
{{end}}


{{define "client"}}
from typing import Generic, TypeVar, Optional, Any, Type
import requests
from dataclasses import asdict

T = TypeVar('T')
P = TypeVar('P')


class ApiClient:

    def get(self, path: str, mode: Type[T], params: P = None) -> Optional[T]:
        ...

    def post(self, path: str, mode: Type[T], params: P = None) -> Optional[T]:
        ...

    def put(self, path: str, mode: Type[T], params: P = None) -> Optional[T]:
        ...

    def delete(self, path: str, mode: Type[T], params: P = None) -> Optional[T]:
        ...




class HttClient(ApiClient):
    BASE_URL = "{{.Endpoint}}"

    def get(self, path: str, mode: Type[T], params: P = None) -> Optional[T]:
        url = f"{self.BASE_URL}{path}"
        return requests.get(url=url, params=params).json()

    def post(self, path: str, mode: Type[T], params: P = None) -> Optional[T]:
        url = f"{self.BASE_URL}{path}"
        return requests.post(url=url, json=asdict(params)).json()

    def put(self, path: str, mode: Type[T], params: P = None) -> Optional[T]:
        url = f"{self.BASE_URL}{path}"
        return requests.put(url=url, json=asdict(params)).json()

    def delete(self, path: str, mode: Type[T], params: P = None) -> Optional[T]:
        url = f"{self.BASE_URL}{path}"
        return requests.delete(url=url, json=asdict(params)).json()


{{end}}