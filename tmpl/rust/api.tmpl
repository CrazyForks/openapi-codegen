{{range $val :=.Output.Header}}
{{- $val}}
{{end}}

use std::collections::HashMap;
use std::io::Error;
use std::iter::Map;
use crate::Client::ApiClient;
use crate::Model::*;


{{range $val :=.Apis}}
{{template "api" $val}}
{{end}}


{{define "api"}}
/**
 * {{.Description}}
 */
pub struct {{Capitalize .Name}} {
    client: dyn ApiClient,
}

impl {{Capitalize .Name}} {

	{{range $val :=.Paths -}}
	{{template "path" $val}}
	{{end}}
}
{{end}}


{{define "path"}}

	/**
	 * {{.Description}}
	 * {{.Summary}}
	 */
    async fn {{.Name}}(&self, {{template "parameters" .}}) -> Result<{{.Response.Expression}},Error>  {
        {{ if .Queries -}}
        let mut params = HashMap::new();
        {{range $idx,$val := .Parameters -}}
        params.insert("{{$val.Name}}",{{$val.Alias}}.to_string());
        {{end}}
        {{- else -}}
        {{if .Request}}{{else}}let mut params = HashMap::new();{{end}}
        {{- end}}
        self.client.{{.Method}}(String::from({{.Path}}), {{- if .Request}}body{{else}}params{{end}})
    }
{{end}}


{{define "parameters"}}
{{- range $idx,$val := .Parameters -}}{{if gt $idx 0}},{{end}}{{$val.Alias}}: {{$val.Type.Expression}}{{- end -}}
{{end}}
