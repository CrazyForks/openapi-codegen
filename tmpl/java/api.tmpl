{{range $val :=.Output.Header}}
{{- $val}}
{{end}}

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.JsonNode;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

{{range $val :=.Apis}}
{{template "api" $val}}
{{end}}


{{define "api"}}
/**
 * {{.Description}}
 */
public class {{Capitalize .Name}} {

    private final ApiClient client;

    public {{Capitalize .Name}}(ApiClient client) {
        this.client = client;
    }

	{{range $val :=.Paths -}}
	{{template "path" $val}}
	{{end}}
}
{{end}}


{{define "path"}}

    public static final TypeReference<{{.Response.Expression}}> {{.Name}}ResultType = new TypeReference<{{.Response.Expression}}>() {
    };

	/**
	 * {{.Description}}
	 * {{.Summary}}
	 */
    public {{.Response.Expression}} {{.Name}}({{template "parameters" .}}) {
        {{ if .Queries -}}
        Map<String,Object> params = new HashMap<String,Object>();
        {{range $idx,$val := .Parameters -}}
        params.put("{{$val.Name}}",{{$val.Alias}});
        {{end}}
        {{- else -}}
        {{if .Request}}{{else}}Map<String,Object> params = new HashMap<String,Object>();{{end}}
        {{- end}}
        return client.{{.Method}}({{.Path}}, {{- if .Request}}body{{else}}params{{end}}, {{.Name}}ResultType);
    }
{{end}}


{{define "parameters"}}
{{- range $idx,$val := .Parameters -}}{{if gt $idx 0}},{{end}} {{$val.Type.Expression}} {{$val.Alias}}{{- end -}}
{{end}}
