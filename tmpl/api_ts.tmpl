{{define "header"}}
import { ApiClient } from "./client"
{{end}}

{{define "client"}}
import axios, {AxiosError, AxiosResponse} from "axios";

export const axiosClient = axios.create({
    baseURL: "{{.Endpoint}}",
    headers: {
        'Content-Type': 'application/json;charset=utf-8'
    },
    timeout: Number(60000),
    withCredentials: false
})

axiosClient.interceptors.response.use((response: AxiosResponse) => {
    return response.data
}, (error: AxiosError) => {
    return Promise.reject(error)
})

export const ApiClient = {

    get: async (path: string, params?: any) => {
        return await axiosClient.get(path,{params:params}) as any
    },

    post: async (path: string, body?: any) => {
        return await axiosClient.post(path, body) as any
    },

    put: async (path: string, body?: any) => {
        return await axiosClient.put(path, body) as any
    },

    delete: async (path: string, body?: any) => {
        return await axiosClient.delete(path, body) as any
    },
}
{{end}}



{{define "struct"}}
/**
 * {{.Description}}
 */
export interface {{.Type.Expression}} {
	{{range $val :=.Properties -}}
	//{{$val.Description}}
	{{- if $val.Enums -}}// Enums: {{$val.Enums}} {{- end}}
	{{$val.Name}}?: {{$val.Type.Expression}}
	{{end}}
}
{{end}}


{{define "api"}}
/**
 * {{.Description}}
 */
export const {{.Name}} = {
	{{range $val :=.Paths -}}
	{{template "path" $val}}
	{{end}}
}
{{end}}


{{define "parameters"}}
{{- range $idx,$val := .Parameters -}}{{if gt $idx 0}},{{end}} {{$val.Alias}}: {{$val.Type.Expression}}{{- end -}}
{{end}}


{{define "path"}}
	/**
	 * {{.Summary}}
	 * {{.Description}}
	 */
	{{.Name}}: async ({{template "parameters" .}}) => {
        {{- if .Queries}}
        let params = { {{- range $idx,$val := .Queries -}}{{if gt $idx 0}},{{end}} {{$val.Name}}: {{$val.Alias}}{{- end -}} };
        {{- else -}}
        {{- if .Request}}{{else}}let params = {};{{end -}}
        {{- end}}
		return await ApiClient.{{.Method}}({{.Path}},{{- if .Request}}body{{else}}params{{end}}) as {{.Response.Expression}}
	},
{{end}}