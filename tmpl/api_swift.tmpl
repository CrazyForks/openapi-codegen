{{define "header"}}
import Foundation
import Alamofire
{{end}}

{{define "client"}}

import Alamofire
import Foundation

/**
 * TODO You need to implement the current protocol, which can refer to Alamofire or URLSession
 */
protocol ApiClient {
    func get<T: Codable>(_ path: String, _ params: Any?, _ resultType: T.Type) async throws -> T

    func post<T: Codable>(_ path: String, _ params: Any?, _ resultType: T.Type) async throws -> T

    func put<T: Codable>(_ path: String, _ params: Any?, _ resultType: T.Type) async throws -> T

    func delete<T: Codable>(_ path: String, _ params: Any?, _ resultType: T.Type) async throws -> T
}

var BASE_URL = "{{.Endpoint}}"

struct AlamofireApiClient: ApiClient {
    var headers: HTTPHeaders?

    func get<T>(_ path: String, _ params: Any?, _ resultType: T.Type) async throws -> T where T: Decodable, T: Encodable {
        let reqParams: Parameters? = params as? [String: Any]
        return try await AF.request("\(BASE_URL)\(path)",
                                    method: .get,
                                    parameters: reqParams,
                                    encoding: URLEncoding.default,
                                    headers: headers)
            .serializingDecodable(resultType.self).value
    }

    func post<T>(_ path: String, _ params: Any?, _ resultType: T.Type) async throws -> T where T: Decodable, T: Encodable {
        let reqParams: Parameters? = params as? Dictionary<String, any Sendable>
        return try await AF.request("\(BASE_URL)\(path)",
                                    method: .post,
                                    parameters: reqParams,
                                    encoding: JSONEncoding.default,
                                    headers: headers)
            .serializingDecodable(resultType.self).value
    }

    func put<T>(_ path: String, _ params: Any?, _ resultType: T.Type) async throws -> T where T: Decodable, T: Encodable {
        let reqParams: Parameters? = params as? Dictionary<String, any Sendable>
        return try await AF.request("\(BASE_URL)\(path)",
                                    method: .put,
                                    parameters: reqParams,
                                    encoding: JSONEncoding.default,
                                    headers: headers)
            .serializingDecodable(resultType.self).value
    }

    func delete<T>(_ path: String, _ params: Any?, _ resultType: T.Type) async throws -> T where T: Decodable, T: Encodable {
        let reqParams: Parameters? = params as? Dictionary<String, any Sendable>
        return try await AF.request("\(BASE_URL)\(path)",
                                    method: .delete,
                                    parameters: reqParams,
                                    encoding: JSONEncoding.default,
                                    headers: headers)
            .serializingDecodable(resultType.self).value
    }
}

{{end}}


{{define "struct"}}
/**
 * {{.Description}}
 */
public struct {{.Type.Expression}}:Codable {
	{{range $val :=.Properties -}}
	//{{$val.Description}}
	{{- if $val.Enums -}}// Enums: {{$val.Enums}} {{- end}}
	var {{$val.Name}}: {{$val.Type.Expression}}?
	{{end}}
}
{{end}}


{{define "parameters"}}
	{{- if .Parameters -}}
		{{range $idx,$val := .Parameters -}} {{if gt $idx 0}}, {{end}}_ {{$val.Alias}}:{{$val.Type.Expression}}{{end}}
	{{- else -}}
		{{if .Request}}_ params: {{.Request.Expression}} {{end}}
	{{- end -}}
{{end}}


{{define "path"}}
	/**
	 * {{.Description}}
	 */
    func {{.Name}}({{template "parameters" .}}) async throws -> {{.Response.Expression}} {
        {{if .Parameters -}}
        var params: [String: Any?] = [:]
        {{range $idx,$val := .Parameters -}}
        params["{{$val.Name}}"] = {{$val.Alias}}
        {{end}}
        {{- end -}}
        return try await client.{{.Method}}({{.Path}}, {{if or .Parameters .Request}}params{{else}}nil{{end}} ,{{.Response.Expression}}.self)
    }
{{end}}


{{define "api"}}
/**
 * {{.Description}}
 */
class {{.Name}} {

    var client: ApiClient

    init(client: ApiClient) {
        self.client = client
    }

	{{range $val :=.Paths -}}
	{{template "path" $val}}
	{{end}}
}
{{end}}